name: Build and Deploy Hola Vecina Backend to ECS

on:
  push:
    branches:
      - dev

env:
  ECR_BACKEND_IMAGE: ${{ vars.ECR_BACKEND_IMAGE }}
  AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
  ECS_CLUSTER: ${{ vars.ECS_CLUSTER }}
  ECS_BACKEND_SERVICE: ${{ vars.ECS_BACKEND_SERVICE }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

jobs:
  push_notify:
    runs-on: ubuntu-latest

    steps:
      - name: Notify Push
        run: |
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          curl -X POST -H 'Content-type: application/json' --data '{
            "text": "ðŸ”” *New Push Detected*",
            "attachments": [
              {
                "color": "#2eb886",
                "fields": [
                  {
                    "title": "Repository",
                    "value": "${{ github.repository }}",
                    "short": true
                  },
                  {
                    "title": "Branch",
                    "value": "${{ github.ref_name }}",
                    "short": true
                  },
                  {
                    "title": "Actor",
                    "value": "${{ github.actor }}",
                    "short": true
                  },
                  {
                    "title": "Timestamp",
                    "value": $TIMESTAMP,
                    "short": true
                  }
                ]
              }
            ]
          }' ${{ secrets.SLACK_WEBHOOK_URL }}

  unit-tests:
    runs-on: ubuntu-latest
    needs: push_notify

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Node.js dependencies
        run: npm install

      - name: Run Unit Tests
        run: npm test

      - name: Send Slack Notification on Success
        if: success()
        run: |
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          curl -X POST -H 'Content-type: application/json' --data '{
            "text": "ðŸš€ *Unit Tests Passed*",
            "attachments": [
              {
                "color": "#36a64f",
                "fields": [
                  {
                    "title": "Repository",
                    "value": "${{ github.repository }}",
                    "short": true
                  },
                  {
                    "title": "Branch",
                    "value": "${{ github.ref_name }}",
                    "short": true
                  },
                  {
                    "title": "Actor",
                    "value": "${{ github.actor }}",
                    "short": true
                  },
                  {
                    "title": "Timestamp",
                    "value": "$TIMESTAMP",
                    "short": true
                  }
                ]
              }
            ]
          }' ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send Slack Notification on Failure
        if: failure()
        run: |
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          curl -X POST -H 'Content-type: application/json' --data '{
            "text": "ðŸš¨ *Unit Tests Failed*",
            "attachments": [
              {
                "color": "#ff0000",
                "fields": [
                  {
                    "title": "Repository",
                    "value": "${{ github.repository }}",
                    "short": true
                  },
                  {
                    "title": "Branch",
                    "value": "${{ github.ref_name }}",
                    "short": true
                  },
                  {
                    "title": "Actor",
                    "value": "${{ github.actor }}",
                    "short": true
                  },
                  {
                    "title": "Timestamp",
                    "value": "$TIMESTAMP",
                    "short": true
                  }
                ]
              }
            ]
          }' ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send GitHub Email Notification on Failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const { context, github } = require('@actions/github');
            github.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `ðŸš¨ **Unit Tests Failed!**\nPlease check the logs for more details. @${{ github.actor }}`
            });

  build-and-package:
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker for x86
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com

      - name: Build Docker image
        run: |
          docker buildx create --use
          docker buildx inspect --bootstrap
          docker buildx build --platform linux/amd64 -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/${{ vars.ECR_BACKEND_IMAGE }}:latest --push .

      - name: Send Slack Notification on Success
        if: success()
        run: |
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          curl -X POST -H 'Content-type: application/json' --data '{
            "text": "âœ… *Build Completed Successfully*",
            "attachments": [
              {
                "color": "#36a64f",
                "fields": [
                  {
                    "title": "Repository",
                    "value": "${{ github.repository }}",
                    "short": true
                  },
                  {
                    "title": "Branch",
                    "value": "${{ github.ref_name }}",
                    "short": true
                  },
                  {
                    "title": "Actor",
                    "value": "${{ github.actor }}",
                    "short": true
                  },
                  {
                    "title": "Timestamp",
                    "value": "$TIMESTAMP",
                    "short": true
                  }
                ]
              }
            ]
          }' ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send Slack Notification on Failure
        if: failure()
        run: |
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          curl -X POST -H 'Content-type: application/json' --data '{
            "text": "ðŸš¨ *Build Failed*",
            "attachments": [
              {
                "color": "#ff0000",
                "fields": [
                  {
                    "title": "Repository",
                    "value": "${{ github.repository }}",
                    "short": true
                  },
                  {
                    "title": "Branch",
                    "value": "${{ github.ref_name }}",
                    "short": true
                  },
                  {
                    "title": "Actor",
                    "value": "${{ github.actor }}",
                    "short": true
                  },
                  {
                    "title": "Timestamp",
                    "value": "$TIMESTAMP",
                    "short": true
                  }
                ]
              }
            ]
          }' ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send GitHub Email Notification on Failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const { context, github } = require('@actions/github');
            github.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `ðŸš¨ **Build Failed!**\nPlease check the logs for more details. @${{ github.actor }}`
            });

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-package

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Deploy to ECS
        uses: imehedi/actions-awscli-v2@latest
        with:
          args: ecs update-service --cluster ${{ vars.ECS_CLUSTER }} --service ${{ vars.ECS_BACKEND_SERVICE }} --force-new-deployment
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Send Slack Notification on Success
        if: success()
        run: |
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          curl -X POST -H 'Content-type: application/json' --data '{
            "text": "ðŸŽ‰ *Deployment to ECS Completed Successfully*",
            "attachments": [
              {
                "color": "#36a64f",
                "fields": [
                  {
                    "title": "Repository",
                    "value": "${{ github.repository }}",
                    "short": true
                  },
                  {
                    "title": "Branch",
                    "value": "${{ github.ref_name }}",
                    "short": true
                  },
                  {
                    "title": "Actor",
                    "value": "${{ github.actor }}",
                    "short": true
                  },
                  {
                    "title": "Timestamp",
                    "value": "$TIMESTAMP",
                    "short": true
                  }
                ]
              }
            ]
          }' ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send Slack Notification on Failure
        if: failure()
        run: |
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          curl -X POST -H 'Content-type: application/json' --data '{
            "text": "ðŸš¨ *Deployment Failed*",
            "attachments": [
              {
                "color": "#ff0000",
                "fields": [
                  {
                    "title": "Repository",
                    "value": "${{ github.repository }}",
                    "short": true
                  },
                  {
                    "title": "Branch",
                    "value": "${{ github.ref_name }}",
                    "short": true
                  },
                  {
                    "title": "Actor",
                    "value": "${{ github.actor }}",
                    "short": true
                  },
                  {
                    "title": "Timestamp",
                    "value": "$TIMESTAMP",
                    "short": true
                  }
                ]
              }
            ]
          }' ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send GitHub Email Notification on Failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const { context, github } = require('@actions/github');
            github.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `ðŸš¨ **Deployment Failed!**\nPlease check the logs for more details. @${{ github.actor }}`
            });

