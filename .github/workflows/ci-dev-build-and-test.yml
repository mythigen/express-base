# name: Build and Deploy Hola Vecina Backend to ECS
#
# on:
#   push:
#     paths:
#       - "**"
#     branches:
#       - dev
#
# env:
#   ECR_BACKEND_IMAGE: ${{ vars.ECR_BACKEND_IMAGE }}
#   AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
#   ECS_CLUSTER: ${{ vars.ECS_CLUSTER }}
#   ECS_BACKEND_SERVICE: ${{ vars.ECS_BACKEND_SERVICE }}
#
# jobs:
#   deploy:
#     runs-on: ubuntu-latest
#
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v2
#
#       - name: Install Bun
#         run: |
#           curl -fsSL https://bun.sh/install | bash
#           echo 'export BUN_INSTALL="$HOME/.bun"' >> $GITHUB_ENV
#           echo 'export PATH="$BUN_INSTALL/bin:$PATH"' >> $GITHUB_ENV
#           echo "Bun version: $(bun --version)"
#         shell: bash
#
#       - name: Load Bun into PATH
#         run: |
#           source $GITHUB_ENV
#
#       - name: Install Node.js dependencies
#         run: |
#           export BUN_INSTALL="$HOME/.bun"
#           export PATH="$BUN_INSTALL/bin:$PATH"
#           bun install
#
#       - name: Run Tests
#         run: |
#           bun run test
#
#       - name: Set up Docker for x86
#         uses: docker/setup-buildx-action@v3
#
#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
#
#       - name: Login to Amazon ECR
#         run: |
#           aws ecr get-login-password --region ${{ secrets.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com
#
#       - name: Build and push Docker image
#         run: |
#           docker buildx create --use
#           docker buildx inspect --bootstrap
#           docker buildx build --platform linux/amd64 -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/${{ vars.ECR_BACKEND_IMAGE }}:latest --push .
#
#       - name: Deploy to ECS
#         uses: imehedi/actions-awscli-v2@latest
#         with:
#           args: ecs update-service --cluster ${{ vars.ECS_CLUSTER }} --service ${{ vars.ECS_BACKEND_SERVICE }} --force-new-deployment
#         env:
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

name: Build and Deploy Backend, Redis, and MongoDB to ECS

on:
  push:
    paths:
      - "**"
    branches:
      - dev

env:
  ECR_BACKEND_IMAGE: ${{ vars.ECR_BACKEND_IMAGE }}
  AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
  ECS_CLUSTER: ${{ vars.ECS_CLUSTER }}
  ECS_BACKEND_SERVICE: ${{ vars.ECS_BACKEND_SERVICE }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Bun
        run: |
          curl -fsSL https://bun.sh/install | bash
          echo 'export BUN_INSTALL="$HOME/.bun"' >> $GITHUB_ENV
          echo 'export PATH="$BUN_INSTALL/bin:$PATH"' >> $GITHUB_ENV
        shell: bash

      - name: Load Bun into PATH
        run: |
          source $GITHUB_ENV

      - name: Install Node.js dependencies
        run: |
          export BUN_INSTALL="$HOME/.bun"
          export PATH="$BUN_INSTALL/bin:$PATH"
          bun install

      # - name: Run Tests
      #   run: |
      #     bun run test

      - name: Set up Docker for x86
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com

      - name: Build and push Docker images
        run: |
          docker buildx create --use
          docker buildx inspect --bootstrap
          # Build and push Node.js app image
          docker buildx build --platform linux/amd64 -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/${{ vars.ECR_BACKEND_IMAGE }}:latest --push .
          # # Build and push MongoDB image (optional if customized)
          # docker buildx build --platform linux/amd64 -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/mongo:latest --push ./mongo
          # # Build and push Redis image (optional if customized)
          # docker buildx build --platform linux/amd64 -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/redis:latest --push ./redis

      - name: Deploy to ECS
        uses: imehedi/actions-awscli-v2@latest
        with:
          args: ecs update-service --cluster ${{ vars.ECS_CLUSTER }} --service ${{ vars.ECS_BACKEND_SERVICE }} --force-new-deployment
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

